<configuration>  
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">  
        <encoder>  
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <charset>UTF-8</charset> 
        </encoder>  
    </appender>  
    <appender name="infolog"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
        <File>E:\log\info.log</File>  
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
	        <!--过滤 Error-->
	        <level>ERROR</level>
	        <!--匹配到就禁止-->
	        <onMatch>DENY</onMatch>
	        <!--没有匹配到就允许-->
	        <onMismatch>ACCEPT</onMismatch>
	    </filter>
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
       		 <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->  
            <fileNamePattern>E:\log\info.log.%d.%i</fileNamePattern>  
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
        		<!-- or whenever the file size reaches 10 MB -->  
        		 <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
        		<maxFileSize>10 MB</maxFileSize>  
      		</timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>  
            <pattern>  
                %d %p (%file:%line\)- %m%n
            </pattern>  
            <charset>UTF-8</charset> <!-- 此处设置字符集 --> 
        </encoder>
    </appender>
    <appender name="errorlog"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
        <File>E:\log\error.log</File>
	    <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
	    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	        <level>Error</level>
	    </filter>
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
       		 <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->  
            <fileNamePattern>E:\log\error.%d{yyyy-MM-dd}.%i</fileNamePattern>  
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
        		<!-- or whenever the file size reaches 10 MB -->  
        		 <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
        		<maxFileSize>10 MB</maxFileSize>  
      		</timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>  
            <pattern>  
                %d %p (%file:%line\)- %m%n
            </pattern>  
            <charset>UTF-8</charset> <!-- 此处设置字符集 --> 
        </encoder>
    </appender>
    <root level="info">  
        <appender-ref ref="STDOUT" />  
    </root>  
    <logger name="com.pikapika.app" level="DEBUG">  
        <appender-ref ref="infolog" />
        <appender-ref ref="errorlog" />
    </logger>
</configuration>